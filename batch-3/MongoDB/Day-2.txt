:::::::::::::: TEST DATA :::::::::::::::
[
  {
     name: "iPhone 12",
    price: 999,
    quantity: 50,
    category: "electronics",
    status: "available",
    color: "black"
  },
  {
    name: "Samsung Galaxy S20",
    price: 899,
    quantity: 30,
    category: "electronics",
    status: "available",
    color: "white"
  },
  {
    name: "iPad Pro",
    price: 799,
    quantity: 20,
    category: "electronics",
    status: "sold",
    color: "silver"
  },
  {
    name: "Sony PlayStation 5",
    price: 499,
    quantity: 10,
    category: "electronics",
    status: "available",
    color: "black"
  },
  {
    name: "LG 4K OLED TV",
    price: 1499,
    quantity: 5,
    category: "electronics",
    status: "available",
    color: "black"
  },
  {
    name: "Apple Watch Series 6",
    price: 399,
    quantity: 15,
    category: "electronics",
    status: "available",
    color: "silver"
  },
  {
    name: "Dell XPS 15",
    price: 1599,
    quantity: 25,
    category: "electronics",
    status: "available",
    color: "silver"
  },
  {
    name: "Nike Air Zoom Pegasus 38",
    price: 120,
    quantity: 100,
    category: "clothing",
    status: "available",
    size: "10",
    color: "blue"
  },
  {
    name: "Adidas Ultraboost 21",
    price: 180,
    quantity: 80,
    category: "clothing",
    status: "available",
    size: "9",
    color: "black"
  },
  {
    name: "Levi's 501 Original Fit Jeans",
    price: 59,
    quantity: 150,
    category: "clothing",
    status: "available",
    size: "32x32",
    color: "blue"
  }
]
:::::::::::::::: Sorting ::::::::::::::

From high to Low
   -> db.products.find().sort({price:-1});

From Low to high
   ->db.products.find().sort({price:1});

::::::::::: Limit my Search :::::::::::

 Limit search to a certain number 
    -> db.products.find().limit(5);


:::::::::::  Comparison Operators :::::::::::::::

Find documents where the price is equal to $999.
   -> db.products.find({ "price": { "$eq": 999 } })

Find documents where the quantity is not equal to 30.
   -> db.products.find({ "quantity": { "$ne": 30 } })

Find documents where the price is greater than $1000.
   -> db.products.find({ "price": { "$gt": 1000 } })

Find documents where the quantity is greater than or equal to 50.
   -> db.products.find({ "quantity": { "$gte": 50 } })

Find documents where the price is less than $200.
   -> db.products.find({ "price": { "$lt": 200 } })

Find documents where the quantity is less than or equal to 15.
   -> db.products.find({ "quantity": { "$lte": 15 } })

Find documents where the category is matched within an array ["electronics", "clothing"].
   -> db.products.find({ "category": { "$in": ["electronics", "clothing"] } })

::::::::::::::: Logical Operators :::::::::::::::

Find documents where both the category is "electronics" and the status is "available".
   -> db.products.find({ "$and": [ { "category": "electronics" }, { "status": "available" } ] })

Find documents where either the color is "black" or the price is less than $100.
   -> db.products.find({ "$or": [ { "color": "black" }, { "price": { "$lt": 100 } } ] })

Find documents where neither the quantity is 10 nor the status is "sold".
   -> db.products.find({ "$nor": [ { "quantity": 10 }, { "status": "sold" } ] })

Find documents where the size does not match "9".
   -> db.products.find({ "$not": { "size": "9" } })